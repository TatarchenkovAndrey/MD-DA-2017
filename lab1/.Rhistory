print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
output <- append(output, steps)
names(output) <- append(colnames(factory), c("шаги"))
return(output)
}
val1 <- factory.run()
val1
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
message(steps)
print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
output <- append(output, steps)
names(output) <- append(names(output), c("шаги"))
return(output)
}
val1 <- factory.run()
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
message(steps)
print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
output <- append(output, steps)
names(output) <- append(colnames(factory), c("шаги"))
return(output)
}
val1 <- factory.run*()
val1 <- factory.run()
val1
res5 <- factory.run()
res5
res6 <- factory.run(30,20)
res6 <- factory.run(30,20)
res6
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
message(steps)
print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
output <- append(output, steps, needed)
names(output) <- append(colnames(factory), c("шаги", "трудодни", "сталь"))
return(output)
}
res6 <- factory.run(30,20)
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
message(steps)
print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
output <- append(output, steps, needed)
names(output) <- append(colnames(factory), c("шаги", "ресурсы"))
return(output)
}
res6 <- factory.run(30,20)
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
message(steps)
print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
output <- append(output, steps, needed)
names(output) <- append(colnames(factory), c("шаги", "трудодни", "сталь"))
return(output)
}
res6 <- factory.run(30,20)
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
message(steps)
print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
output <- append(output, steps, needed)
#names(output) <- append(colnames(factory), c("шаги", "трудодни", "сталь"))
return(output)
}
res6 <- factory.run(30,20)
res6
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
message(steps)
print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
output <- append(output, steps, needed)
#names(output) <- append(colnames(factory), c("шаги", "трудодни", "сталь"))
return(output)
}
factory.run*()
factory.run()
factory.run()
factory.run()
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
message(steps)
print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
return(output)
}
factory.run*()
factory.run()
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
message(steps)
print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
output <- append(output, steps)
names(output) <- append(colnames(factory), c("шаги"))
return(output)
}
res6 <- factory.run()
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
message(steps)
print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
output <- append(output, steps, needed)
names(output) <- append(colnames(factory), c("шаги", "трудодни", "сталь"))
return(output)
}
res6 <- factory.run()
append(c("1", "2"), c("3","4","5"))
val123<-factory.run*()
val123<-factory.run()
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
message(steps)
print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
output <- append(output, steps, needed)
#names(output) <- append(colnames(factory), c("шаги", "трудодни", "сталь"))
return(output)
}
val123 <- factory.run*()
val123 <- factory.run()
val123
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
message(steps)
print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
output <- append(output, c(steps, needed))
names(output) <- append(colnames(factory), c("шаги", "трудодни", "сталь"))
return(output)
}
res6 <- factory.run(30,20)
res6
res6["трудодни"]
res6["сталь"]
res6["шаги"]
length(Cars93)
size(Cars93)
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE)
html <-readLines("forbes.htm")
length(html)
length(html)
html <-readLines("forbes.htm")
pattern <- "\\${1}\\d+((,\\d{1} )| )B{1}"
length(grep(pattern, html))
result <-grep(pattern, html))
result <-grep(pattern, html)
